import com.sun.xml.internal.ws.util.StringUtils

buildscript {
    ext.k8s_client_version = "3.0.0"
    ext.apache_commons_version = "3.8.1"
    ext.junit_version = "5.1.0"
    ext.jvm_target = "1.8"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.apache.commons:commons-lang3:$apache_commons_version"
    }
}

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
}

compileKotlin { kotlinOptions.jvmTarget = jvm_target }
compileTestKotlin { kotlinOptions.jvmTarget = jvm_target }

sourceSets {
    main.kotlin.srcDirs += "src/main"
    test.kotlin.srcDirs += "src/test"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "io.kubernetes:client-java:$k8s_client_version"

    // Testing.
    testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testRuntime "org.junit.vintage:junit-vintage-engine:4.12.0"
}

// Top-level run task to run all experiments.
task run {}

// Add run tasks for each experiment and add the task as a dependency to
// the top-level run task.
// i.e., runX001pod from x001pod experiment and add runX001pod to run
// dependencies.
files { file("./src/main/experiments").listFiles() }.each { File it ->
    String experimentName = it.name
    // Skip over anything not matching the x000string experiment name format,
    // such as "common" or any other sub-packages in the experiments package.
    if (!experimentName.matches("x\\d{3,}.*"))
        return

    String nameTitled = StringUtils.capitalize it.name
    String taskName = "run$nameTitled"

    // Create a task for the experiment
    task "${taskName}" (type: JavaExec) {
        main = "experiments.${experimentName}.RunKt"
        classpath = sourceSets.main.runtimeClasspath
    }

    // Make the top-level run task depend on running the experiment.
    run.dependsOn taskName
}

test {
    useJUnitPlatform {
        includeEngines "junit-jupiter", "junit-vintage"
    }
}